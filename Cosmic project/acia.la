   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.10.2 - 02 Nov 2011
   3                     ; Generator (Limited) V4.3.7 - 29 Nov 2011
   4                     ; Optimizer V4.3.6 - 29 Nov 2011
2082                     ; 26 char getch(void)
2082                     ; 27 	{
2083                     	switch	.text
2084  80a1               f_getch:
2086  80a1 88            	push	a
2087       00000001      OFST:	set	1
2090  80a2 ce0102        	ldw	x,_ptlec
2091  80a5               L7631:
2092                     ; 30 	while (ptlec == ptecr)		/* equal pointers => loop */
2094  80a5 c30100        	cpw	x,_ptecr
2095  80a8 27fb          	jreq	L7631
2096                     ; 32 	c = *ptlec++;			/* get the received char */
2098  80aa f6            	ld	a,(x)
2099  80ab 5c            	incw	x
2100                     ; 33 	if (ptlec >= &buffer[SIZE])	/* put in in buffer */
2102  80ac a30144        	cpw	x,#_buffer+64
2103  80af 2503          	jrult	L3731
2104                     ; 34 		ptlec = buffer;
2106  80b1 ae0104        	ldw	x,#_buffer
2107  80b4               L3731:
2108  80b4 cf0102        	ldw	_ptlec,x
2109                     ; 35 	return (c);
2113  80b7 5b01          	addw	sp,#1
2114  80b9 87            	retf	
2147                     ; 40 void outch(char c)
2147                     ; 41 	{
2148                     	switch	.text
2149  80ba               f_outch:
2151  80ba 88            	push	a
2152       00000000      OFST:	set	0
2155  80bb               L3141:
2156                     ; 42 	while (!(USART_SR & TRDE))	/* wait for READY */
2158  80bb 720f4a30fb    	btjf	_USART_SR,#7,L3141
2159                     ; 44 	USART_DR = c;			/* send it */
2161  80c0 7b01          	ld	a,(OFST+1,sp)
2162  80c2 c74a31        	ld	_USART_DR,a
2163                     ; 45 	}
2166  80c5 84            	pop	a
2167  80c6 87            	retf	
2193                     ; 51 @interrupt void recept(void)
2193                     ; 52 	{
2194                     	switch	.text
2195  80c7               f_recept:
2199                     ; 53 	USART_SR;			/* clear interrupt */
2201  80c7 c64a30        	ld	a,_USART_SR
2202                     ; 54 	*ptecr++ = USART_DR;		/* get the char */
2204  80ca ce0100        	ldw	x,_ptecr
2205  80cd c64a31        	ld	a,_USART_DR
2206  80d0 f7            	ld	(x),a
2207  80d1 5c            	incw	x
2208                     ; 55 	if (ptecr >= &buffer[SIZE])	/* put it in buffer */
2210  80d2 a30144        	cpw	x,#_buffer+64
2211  80d5 2503          	jrult	L7241
2212                     ; 56 		ptecr = buffer;
2214  80d7 ae0104        	ldw	x,#_buffer
2215  80da               L7241:
2216  80da cf0100        	ldw	_ptecr,x
2217                     ; 57 	}
2220  80dd 80            	iret	
2258                     ; 65  int add(int a, int b)
2258                     ; 66  {
2259                     	switch	.text
2260  80de               f_add:
2262  80de 89            	pushw	x
2263       00000000      OFST:	set	0
2266                     ; 67 	 return a+b;
2268  80df 72fb06        	addw	x,(OFST+6,sp)
2271  80e2 5b02          	addw	sp,#2
2272  80e4 87            	retf	
2310                     ; 70  int minus(int a, int b)
2310                     ; 71  {
2311                     	switch	.text
2312  80e5               f_minus:
2314  80e5 89            	pushw	x
2315       00000000      OFST:	set	0
2318                     ; 72 	 return a-b;
2320  80e6 72f006        	subw	x,(OFST+6,sp)
2323  80e9 5b02          	addw	sp,#2
2324  80eb 87            	retf	
2366                     ; 76 void main(void)
2366                     ; 77 	{
2367                     	switch	.text
2368  80ec               f_main:
2370  80ec 89            	pushw	x
2371       00000002      OFST:	set	2
2374                     ; 78 	int result =0;
2376                     ; 80 	result = minus( 3 , 2 );
2378  80ed ae0002        	ldw	x,#2
2379  80f0 89            	pushw	x
2380  80f1 5c            	incw	x
2381  80f2 8d0080e5      	callf	f_minus
2383  80f6 85            	popw	x
2384                     ; 81 	result = add( 2 , 3 );
2386  80f7 ae0003        	ldw	x,#3
2387  80fa 89            	pushw	x
2388  80fb 5a            	decw	x
2389  80fc 8d0080de      	callf	f_add
2391  8100 5b02          	addw	sp,#2
2392                     ; 83 	result += 7;
2394  8102 1c0007        	addw	x,#7
2395  8105 1f01          	ldw	(OFST-1,sp),x
2396                     ; 85 	ptecr = ptlec = buffer;		/* initialize pointers */
2398  8107 ae0104        	ldw	x,#_buffer
2399  810a cf0102        	ldw	_ptlec,x
2400  810d cf0100        	ldw	_ptecr,x
2401                     ; 86 	USART_BRR1 = 0xc9;		/* parameter for baud rate */
2403  8110 35c94a32      	mov	_USART_BRR1,#201
2404                     ; 87 	USART_CR1 = 0x00;		/* parameter for word length */
2406  8114 725f4a34      	clr	_USART_CR1
2407                     ; 88 	USART_CR2 = 0x2c;		/* parameters for interrupt */
2409  8118 352c4a35      	mov	_USART_CR2,#44
2410                     ; 89 	rim();				/* authorize interrupts */
2413  811c 9a            	rim	
2415  811d               L1051:
2416                     ; 94 		outch(getch());		/* get and put a char */
2418  811d 8d0080a1      	callf	f_getch
2420  8121 8d0080ba      	callf	f_outch
2423  8125 20f6          	jra	L1051
2467                     	xdef	f_main
2468                     	xdef	f_minus
2469                     	xdef	f_add
2470                     	xdef	f_recept
2471                     	xdef	f_outch
2472                     	xdef	f_getch
2473                     	switch	.bss
2474  0100               _ptecr:
2475  0100 0000          	ds.b	2
2476                     	xdef	_ptecr
2477  0102               _ptlec:
2478  0102 0000          	ds.b	2
2479                     	xdef	_ptlec
2480  0104               _buffer:
2481  0104 000000000000  	ds.b	64
2482                     	xdef	_buffer
2502                     	end
